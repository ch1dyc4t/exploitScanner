#!/usr/bin/env python
# encoding: utf-8

"""

    Create time: 4/9/2016 11:37 AM
    Author: xxxxxxx
    Email: xxxxxxxx@gmail.com
    File name: exploitScanner.py

"""

import optparse,ping,nmap,re
from socket import *


def hostPolling(tgtHosts, tgtPorts, icmpType, udpScan, synScan, finScan):
    for tgtHost in tgtHosts:
        portPollingScan(tgtHost, tgtPorts, udpScan, synScan, finScan)
        if icmpType:
            icmpScan(tgtHost)


def icmpScan(tgtHost):
    print '\n\033[1;37m[\033[0m' \
          '\033[1;33m * \033[0m' \
          '\033[1;37m]\033[0m' \
          ' \033[1;34mICMP\033[0m Scan Results for: '\
          '\033[1;36m' + tgtHost + '\033[0m'
    pingResult = ping.do_one(tgtHost, 1, 10)
    if pingResult:
        print '\033[1;37m[\033[0m' \
              ' + ' \
              '\033[1;37m]\033[0m' \
              ' \tHost \033[1;36m%s\033[0m is UP!!!' % tgtHost
    else:
        print '\033[1;37m[\033[0m' \
              '\033[1;31m - \033[0m' \
              '\033[1;37m]\033[0m ' \
              '\tHost \033[1;36m%s\033[0ms is Down!!!' % tgtHost
    pass


def portPollingScan(tgtHost, tgtPorts, udpScan, synScan, finScan):
    try:
        # print type(tgtHost)
        tgtIP = gethostbyname(''.join(tgtHost))
    except:
        print "\033[1;37m[\033[0m" \
              "\033[1;31m - \033[0m" \
              "\033[1;37m]\033[0m" \
              " Cannot resolve \033[1;36m%s\033[0m: Unknown host. " %tgtHost
        return
    try:
        tgtName = gethostbyaddr(tgtIP)
        print '\n\033[1;37m[\033[0m' \
              '\033[1;33m * \033[0m' \
              '\033[1;37m]\033[0m' \
              ' \033[1;34mTCP\033[0m Scan Results for: '\
              + tgtName
    except:
        print '\n\033[1;37m[\033[0m' \
              '\033[1;33m * \033[0m' \
              '\033[1;37m]\033[0m' \
              ' \033[1;34mTCP\033[0m Scan Results for: '\
              '\033[1;36m' + tgtIP + '\033[0m'

    setdefaulttimeout(10)
    for tgtPort in tgtPorts:
        tcpConnScan(tgtHost, int(tgtPort))
    if udpScan:
        print '\n\033[1;37m[\033[0m' \
              '\033[1;33m * \033[0m' \
              '\033[1;37m]\033[0m' \
              ' \033[1;34mUDP\033[0m Scan Results for: '\
              '\033[1;36m' + tgtHost + '\033[0m'
        for tgtPort in tgtPorts:
            udpConnScan(tgtHost, int(tgtPort))
    if synScan:
        print '\n\033[1;37m[\033[0m' \
              '\033[1;33m * \033[0m' \
              '\033[1;37m]\033[0m' \
              ' \033[1;34mSYN\033[0m Scan Results for: '\
              '\033[1;36m' + tgtHost + '\033[0m'
        for tgtPort in tgtPorts:
            synConnScan(tgtHost, int(tgtPort))
    if finScan:
        print '\n\033[1;37m[\033[0m' \
              '\033[1;33m * \033[0m' \
              '\033[1;37m]\033[0m' \
              ' \033[1;34mFIN\033[0m Scan Results for: '\
              '\033[1;36m' + tgtHost + '\033[0m'
        for tgtPort in tgtPorts:
            finConnScan(tgtHost, int(tgtPort))


def tcpConnScan(tgtHost, tgtPort):
    try:
        connSkt = socket(AF_INET, SOCK_STREAM)
        connSkt.connect((tgtHost, tgtPort))
        print '\033[1;37m[\033[0m' \
              ' + ' \
              '\033[1;37m]\033[0m' \
              ' \t%d/tcp open' % tgtPort
        connSkt.close()
    except:
        print '\033[1;37m[\033[0m' \
              '\033[1;31m - \033[0m' \
              '\033[1;37m]\033[0m' \
              ' \t%d/tcp closed' % tgtPort

def udpConnScan(tgtHost, tgtPort):
    nm = nmap.PortScanner()
    nm.scan(hosts=tgtHost, arguments='-p '+ str(tgtPort) + ' -sU ')
    hosts_list = [(x, nm[x][u'udp'][tgtPort]['state']) for x in nm.all_hosts()]
    for host, status in hosts_list:
        open = re.search('open', status)
        if open:
            print '\033[1;37m[\033[0m' \
                  ' + ' \
                  '\033[1;37m]\033[0m \t%d/tcp ' % tgtPort\
                  + status
        else:
            print '\033[1;37m[\033[0m' \
                  '\033[1;31m - \033[0m' \
                  '\033[1;37m]\033[0m \t%d/tcp ' % tgtPort\
                  + status


def synConnScan(tgtHost, tgtPort):
    nm = nmap.PortScanner()
    nm.scan(hosts=tgtHost, arguments='-p '+ str(tgtPort) + ' -sS ')
    hosts_list = [(x, nm[x][u'tcp'][tgtPort]['state']) for x in nm.all_hosts()]
    for host, status in hosts_list:
        open = re.search('open', status)
        if open:
            print '\033[1;37m[\033[0m' \
                  ' + ' \
                  '\033[1;37m]\033[0m \t%d/tcp ' % tgtPort\
                  + status
        else:
            print '\033[1;37m[\033[0m' \
                  '\033[1;31m - \033[0m' \
                  '\033[1;37m]\033[0m \t%d/tcp ' % tgtPort\
                  + status


def finConnScan(tgtHost, tgtPort):
    nm = nmap.PortScanner()
    nm.scan(hosts=tgtHost, arguments='-p '+ str(tgtPort) + ' -sF ')
    hosts_list = [(x, nm[x][u'tcp'][tgtPort]['state']) for x in nm.all_hosts()]
    for host, status in hosts_list:
        open = re.search('open', status)
        if open:
            print '\033[1;37m[\033[0m' \
                  ' + ' \
                  '\033[1;37m]\033[0m \t%d/tcp ' % tgtPort\
                  + status
        else:
            print '\033[1;37m[\033[0m' \
                  '\033[1;31m - \033[0m' \
                  '\033[1;37m]\033[0m \t%d/tcp ' % tgtPort\
                  + status

def main():
    parser = optparse.OptionParser("usage%prog " + "--host <target host> --port <target port>")
    parser.add_option('--host', dest='tgtHosts', type='string', help='specify target host')
    parser.add_option('--port', dest='tgtPorts', type='string', help='specify target port')
    parser.add_option('--icmp', dest='icmpType', type='string', help='enable ICMP scan')
    parser.add_option('--udp', dest='udpScan', type='string', help='enable UDP scan')
    parser.add_option('--syn', dest='synScan', type='string', help='enable SYN scan')
    parser.add_option('--fin', dest='finScan', type='string', help='enable FIN scan')

    (options, argvs) = parser.parse_args()
    tgtHosts = str(options.tgtHosts).split(',')
    icmpType = options.icmpType
    udpScan = options.udpScan
    synScan = options.synScan
    finScan = options.finScan
    tgtPorts = str(options.tgtPorts).split(',')

    if(tgtHosts == None) | (tgtPorts[0] == None):
        print '\033[1;37m[\033[0m' \
              '\033[1;31m - \033[0m' \
              '\033[1;37m]\033[0m' \
              ' Please use --help to show the usage!'
        exit(0)
    hostPolling(tgtHosts, tgtPorts, icmpType, udpScan, synScan, finScan)


if __name__ == '__main__':
    print """\033[1m
        \033[1;36m
     _____            _       _ _     ____
    | ____|_  ___ __ | | ___ (_) |_  / ___|  ___ __ _ _ __  _ __   ___ _ __
    |  _| \ \/ / '_ \| |/ _ \| | __| \___ \ / __/ _` | '_ \| '_ \ / _ \ '__|
    | |___ >  <| |_) | | (_) | | |_   ___) | (_| (_| | | | | | | |  __/ |
    |_____/_/\_\ .__/|_|\___/|_|\__| |____/ \___\__,_|_| |_|_| |_|\___|_|
               |_|
        \033[0m                                      \033[1;30m...... Scan everything of you\033[0m
        \033[1;33m
        13084115@hdu.edu.cn / @xxxxxxxx
        13084129@hdu.edu.cn / @Xu Guan
        \033[0m
   """
    main()
